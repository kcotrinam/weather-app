(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"images/bg.jpg";class n{constructor(e,t){this.value=e,this.measurement=t,this.cityContainer=document.querySelector(".content")}transformTemp(e){switch(this.measurement){case"fahrenheit":return 9*Math.round(e-273.15)/5+32+" °F";case"celsius":return`${Math.round(e-273.15)} °C`;default:return`${e} °K`}}get populateContainers(){this.cityContainer.innerHTML="";const e=this.transformTemp(this.value.main.temp),t=this.transformTemp(this.value.main.temp_min),n=this.transformTemp(this.value.main.temp_max),r=this.transformTemp(this.value.main.feels_like);return`\n                  <div class="card">\n                    <div class="card__description">\n                      <p>\n                        ${this.value.weather[0].description}\n                      </p>\n                      <img src= "http://openweathermap.org/img/w/${this.value.weather[0].icon}.png" alt="${this.value.weather[0].description}"/>\n                    </div>\n                    <h1 class="card__city">\n                      ${this.value.name}\n                      <span>${this.value.sys.country}</span>\n                    </h1>\n                    <div class="card__info">\n                    <h2 class="card__temperature">${e}</h2>\n                      <div class="card__info-right">\n                        <div>\n                          <p class="card__min-temperature">Temperature min.: </p>\n                          <span>${t}</span>\n                        </div>\n                        <div>\n                          <p class="card__max-temperature">Temperature max.: </p>\n                          <span>${n}</span>\n                        </div>\n                        <div>\n                          <p class="card__feels">Feels like: </p>\n                          <span>${r}</span>\n                        </div>\n                        <div>\n                          <p class="card__feels">Humidity:</p>\n                          <span>${this.value.main.humidity} %</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                `}render(){this.cityContainer.insertAdjacentHTML("afterbegin",this.populateContainers)}}document.querySelector(".main").style.backgroundImage=`url(${t})`;const r=e=>{e.preventDefault();const t=document.querySelector("form"),r=document.querySelector(".city-input").value,a=document.querySelector("#measurement").value;r&&(async(e,t)=>{const r=await(async e=>(await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&appid=90389a28c75f30a2126f4ec7e1c08520`)).json())(e);new n(r,t).render()})(r,a),t.reset()};document.querySelector("button").addEventListener("click",(e=>r(e)))})();
//# sourceMappingURL=app.js.map