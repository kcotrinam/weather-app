(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})();const n=e.p+"images/bg.jpg",t=e.p+"images/error.jpg";class r{constructor(e,n){this.value=e,this.measurement=n,this.cityContainer=document.querySelector(".content")}transformTemp(e){switch(this.measurement){case"fahrenheit":return 1.8*Math.round(e-273.15)+32+" °F";case"celsius":return`${Math.round(e-273.15)} °C`;default:return`${e} °K`}}get populateContainers(){this.cityContainer.innerHTML="";const e=this.transformTemp(this.value.main.temp),n=this.transformTemp(this.value.main.temp_min),t=this.transformTemp(this.value.main.temp_max),r=this.transformTemp(this.value.main.feels_like);return`\n                  <div class="card">\n                    <div class="card__description">\n                      <p>\n                        ${this.value.weather[0].description}\n                      </p>\n                      <img src= "http://openweathermap.org/img/w/${this.value.weather[0].icon}.png" alt="${this.value.weather[0].description}"/>\n                    </div>\n                    <h1 class="card__city">\n                      ${this.value.name}\n                      <span>${this.value.sys.country}</span>\n                    </h1>\n                    <div class="card__info">\n                    <h2 class="card__temperature">${e}</h2>\n                      <div class="card__info-right">\n                        <div>\n                          <p class="card__min-temperature">Temperature min.: </p>\n                          <span>${n}</span>\n                        </div>\n                        <div>\n                          <p class="card__max-temperature">Temperature max.: </p>\n                          <span>${t}</span>\n                        </div>\n                        <div>\n                          <p class="card__feels">Feels like: </p>\n                          <span>${r}</span>\n                        </div>\n                        <div>\n                          <p class="card__feels">Humidity:</p>\n                          <span>${this.value.main.humidity} %</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                `}renderError(e,n){this.cityContainer.innerHTML="";const r=`\n                          <div class="error-container">\n                            <div class="error">\n                              <h1 class="error__message">${e}\n                                <span>\n                                  <i class="fas fa-cloud"></i>\n                                </span>  \n                              </h1>\n                              <div class="error__img">\n                                <img src="${t}" alt="What?! meme"/>\n                              </div>\n                            </div>\n                            <h2 class="error__submessage">We will work hard to find ${n} city.\n                              <i class="fas fa-fist-raised"></i>\n                            </h2>\n                          </div>\n                          `;this.cityContainer.insertAdjacentHTML("afterbegin",r)}render(){this.cityContainer.insertAdjacentHTML("afterbegin",this.populateContainers)}}document.querySelector(".main").style.backgroundImage=`url(${n})`;const a=e=>{e.preventDefault();const n=document.querySelector("form"),t=document.querySelector(".city-input").value,a=document.querySelector("#measurement").value;t&&(async(e,n)=>{try{const t=await(async e=>{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=90389a28c75f30a2126f4ec7e1c08520`),t=n.json();if(200!==n.status)throw Error("CITY NOT FOUND");return t})(e);new r(t,n).render()}catch(t){new r(void 0,n).renderError(t,e)}})(t,a),n.reset()};document.querySelector("button").addEventListener("click",(e=>a(e)))})();
//# sourceMappingURL=app.js.map